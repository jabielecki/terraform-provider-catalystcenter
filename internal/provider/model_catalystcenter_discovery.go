// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"

	"github.com/CiscoDevNet/terraform-provider-catalystcenter/internal/provider/helpers"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

//template:begin types
type Discovery struct {
	Id                     types.String `tfsdk:"id"`
	CdpLevel               types.Int64  `tfsdk:"cdp_level"`
	Name                   types.String `tfsdk:"name"`
	PreferredIpMethod      types.String `tfsdk:"preferred_ip_method"`
	DiscoveryType          types.String `tfsdk:"discovery_type"`
	IpAddressList          types.String `tfsdk:"ip_address_list"`
	IpFilterList           types.List   `tfsdk:"ip_filter_list"`
	GlobalCredentialIdList types.List   `tfsdk:"global_credential_id_list"`
	ProtocolOrder          types.String `tfsdk:"protocol_order"`
	NetconfPort            types.String `tfsdk:"netconf_port"`
}

//template:end types

//template:begin getPath
func (data Discovery) getPath() string {
	return "/dna/intent/api/v1/discovery"
}

//template:end getPath

//template:begin toBody
func (data Discovery) toBody(ctx context.Context, state Discovery) string {
	body := ""
	if !data.CdpLevel.IsNull() {
		body, _ = sjson.Set(body, "request.cdpLevel", data.CdpLevel.ValueInt64())
	}
	if !data.Name.IsNull() {
		body, _ = sjson.Set(body, "request.name", data.Name.ValueString())
	}
	if !data.PreferredIpMethod.IsNull() {
		body, _ = sjson.Set(body, "request.preferredIpMethod", data.PreferredIpMethod.ValueString())
	}
	if !data.DiscoveryType.IsNull() {
		body, _ = sjson.Set(body, "request.discoveryType", data.DiscoveryType.ValueString())
	}
	if !data.IpAddressList.IsNull() {
		body, _ = sjson.Set(body, "request.ipAddressList", data.IpAddressList.ValueString())
	}
	if !data.IpFilterList.IsNull() {
		var values []string
		data.IpFilterList.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "request.ipFilterList", values)
	}
	if !data.GlobalCredentialIdList.IsNull() {
		var values []string
		data.GlobalCredentialIdList.ElementsAs(ctx, &values, false)
		body, _ = sjson.Set(body, "request.globalCredentialIdList", values)
	}
	if !data.ProtocolOrder.IsNull() {
		body, _ = sjson.Set(body, "request.protocolOrder", data.ProtocolOrder.ValueString())
	}
	if !data.NetconfPort.IsNull() {
		body, _ = sjson.Set(body, "request.netconfPort", data.NetconfPort.ValueString())
	}
	return body
}

//template:end toBody

//template:begin fromBody
func (data *Discovery) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("request.cdpLevel"); value.Exists() {
		data.CdpLevel = types.Int64Value(value.Int())
	} else {
		data.CdpLevel = types.Int64Null()
	}
	if value := res.Get("request.name"); value.Exists() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("request.preferredIpMethod"); value.Exists() {
		data.PreferredIpMethod = types.StringValue(value.String())
	} else {
		data.PreferredIpMethod = types.StringNull()
	}
	if value := res.Get("request.discoveryType"); value.Exists() {
		data.DiscoveryType = types.StringValue(value.String())
	} else {
		data.DiscoveryType = types.StringNull()
	}
	if value := res.Get("request.ipAddressList"); value.Exists() {
		data.IpAddressList = types.StringValue(value.String())
	} else {
		data.IpAddressList = types.StringNull()
	}
	if value := res.Get("request.ipFilterList"); value.Exists() {
		data.IpFilterList = helpers.GetStringList(value.Array())
	} else {
		data.IpFilterList = types.ListNull(types.StringType)
	}
	if value := res.Get("request.globalCredentialIdList"); value.Exists() {
		data.GlobalCredentialIdList = helpers.GetStringList(value.Array())
	} else {
		data.GlobalCredentialIdList = types.ListNull(types.StringType)
	}
	if value := res.Get("request.protocolOrder"); value.Exists() {
		data.ProtocolOrder = types.StringValue(value.String())
	} else {
		data.ProtocolOrder = types.StringNull()
	}
	if value := res.Get("request.netconfPort"); value.Exists() {
		data.NetconfPort = types.StringValue(value.String())
	} else {
		data.NetconfPort = types.StringNull()
	}
}

//template:end fromBody

//template:begin updateFromBody
func (data *Discovery) updateFromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("request.cdpLevel"); value.Exists() && !data.CdpLevel.IsNull() {
		data.CdpLevel = types.Int64Value(value.Int())
	} else {
		data.CdpLevel = types.Int64Null()
	}
	if value := res.Get("request.name"); value.Exists() && !data.Name.IsNull() {
		data.Name = types.StringValue(value.String())
	} else {
		data.Name = types.StringNull()
	}
	if value := res.Get("request.preferredIpMethod"); value.Exists() && !data.PreferredIpMethod.IsNull() {
		data.PreferredIpMethod = types.StringValue(value.String())
	} else {
		data.PreferredIpMethod = types.StringNull()
	}
	if value := res.Get("request.discoveryType"); value.Exists() && !data.DiscoveryType.IsNull() {
		data.DiscoveryType = types.StringValue(value.String())
	} else {
		data.DiscoveryType = types.StringNull()
	}
	if value := res.Get("request.ipAddressList"); value.Exists() && !data.IpAddressList.IsNull() {
		data.IpAddressList = types.StringValue(value.String())
	} else {
		data.IpAddressList = types.StringNull()
	}
	if value := res.Get("request.ipFilterList"); value.Exists() && !data.IpFilterList.IsNull() {
		data.IpFilterList = helpers.GetStringList(value.Array())
	} else {
		data.IpFilterList = types.ListNull(types.StringType)
	}
	if value := res.Get("request.globalCredentialIdList"); value.Exists() && !data.GlobalCredentialIdList.IsNull() {
		data.GlobalCredentialIdList = helpers.GetStringList(value.Array())
	} else {
		data.GlobalCredentialIdList = types.ListNull(types.StringType)
	}
	if value := res.Get("request.protocolOrder"); value.Exists() && !data.ProtocolOrder.IsNull() {
		data.ProtocolOrder = types.StringValue(value.String())
	} else {
		data.ProtocolOrder = types.StringNull()
	}
	if value := res.Get("request.netconfPort"); value.Exists() && !data.NetconfPort.IsNull() {
		data.NetconfPort = types.StringValue(value.String())
	} else {
		data.NetconfPort = types.StringNull()
	}
}

//template:end updateFromBody
