// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"os"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
)

//template:end imports

func TestAccCcImage(t *testing.T) {
	if os.Getenv("TEST_IMAGE_FROM_FILE") == "" {
		t.Skip("skipping test, set environment variable TEST_IMAGE_FROM_FILE")
	}
	var checks []resource.TestCheckFunc

	var steps []resource.TestStep
	if os.Getenv("SKIP_MINIMUM_TEST") == "" {
		steps = append(steps, resource.TestStep{
			Config: testAccCcImagePrerequisitesConfig + testAccCcImageConfig_minimum(),
		})
	}
	steps = append(steps, resource.TestStep{
		Config: testAccCcImagePrerequisitesConfig + testAccCcImageConfig_all(),
		Check:  resource.ComposeTestCheckFunc(checks...),
	})

	resource.Test(t, resource.TestCase{
		PreCheck:                 func() { testAccPreCheck(t) },
		ProtoV6ProviderFactories: testAccProtoV6ProviderFactories,
		ExternalProviders: 	map[string]resource.ExternalProvider{
			"archive": {
				VersionConstraint: "2.4.2",
				Source:            "registry.terraform.io/hashicorp/archive",
			},
		},
		Steps:                    steps,
	})
}

//template:begin testPrerequisites
const testAccCcImagePrerequisitesConfig = `
resource "archive_file" "minimal_zip" {
  type        = "zip"
  output_path = "/tmp/TF.1.2.4-comp_matrix.zip"
  source {
    content  = "dummy"
    filename = "dummy.txt"
  }

  # How to make this work on a builtin provider instead of going with ExternalProviders:
  #provisioner "local-exec" {
  #  command = "echo a > /tmp/a && tar -C /tmp -cf /tmp/dummy.tar a"
  #}
}

`

//template:end testPrerequisites

//template:begin testAccConfigMinimal
func testAccCcImageConfig_minimum() string {
	config := `resource "catalystcenter_image" "test" {` + "\n"
	config += `	source_path = "/tmp/TF.1.2.4-comp_matrix.zip` + "\n"
	config += `	name = basename("/tmp/TF.1.2.4-comp_matrix.zip)` + "\n"
	config += `}` + "\n"
	return config
}

//template:end testAccConfigMinimal

//template:begin testAccConfigAll
func testAccCcImageConfig_all() string {
	config := `resource "catalystcenter_image" "test" {` + "\n"
	config += `	third_party_application_type = "UNKNOWN"` + "\n"
	config += `	family = "TF"` + "\n"
	config += `	source_path = "/tmp/TF.1.2.4-comp_matrix.zip"` + "\n"
	config += `	name = basename("/tmp/TF.1.2.4-comp_matrix.zip")` + "\n"
	config += `	third_party_vendor = "CISCO"` + "\n"
	config += `	is_third_party = true` + "\n"
	config += `}` + "\n"
	return config
}

//template:end testAccConfigAll
