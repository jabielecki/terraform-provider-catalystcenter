// Copyright Â© 2023 Cisco Systems, Inc. and its affiliates.
// All rights reserved.
//
// Licensed under the Mozilla Public License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://mozilla.org/MPL/2.0/
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// SPDX-License-Identifier: MPL-2.0

// Code generated by "gen/generator.go"; DO NOT EDIT.

package provider

//template:begin imports
import (
	"context"

	"github.com/hashicorp/terraform-plugin-framework/types"
	"github.com/tidwall/gjson"
	"github.com/tidwall/sjson"
)

//template:end imports

//template:begin types
type DeviceFamilies struct {
	Id       types.String             `tfsdk:"id"`
	Response []DeviceFamiliesResponse `tfsdk:"response"`
}

type DeviceFamiliesResponse struct {
	DeviceFamily           types.String `tfsdk:"device_family"`
	DeviceFamilyIdentifier types.String `tfsdk:"device_family_identifier"`
}

//template:end types

//template:begin getPath
func (data DeviceFamilies) getPath() string {
	return "/dna/intent/api/v1/image/importation/device-family-identifiers"
}

//template:end getPath

//template:begin toBody
func (data DeviceFamilies) toBody(ctx context.Context, state DeviceFamilies) string {
	body := ""
	if len(data.Response) > 0 {
		body, _ = sjson.Set(body, "response", []interface{}{})
		for _, item := range data.Response {
			itemBody := ""
			if !item.DeviceFamily.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "deviceFamily", item.DeviceFamily.ValueString())
			}
			if !item.DeviceFamilyIdentifier.IsNull() {
				itemBody, _ = sjson.Set(itemBody, "deviceFamilyIdentifier", item.DeviceFamilyIdentifier.ValueString())
			}
			body, _ = sjson.SetRaw(body, "response.-1", itemBody)
		}
	}
	return body
}

//template:end toBody

//template:begin fromBody
func (data *DeviceFamilies) fromBody(ctx context.Context, res gjson.Result) {
	if value := res.Get("response"); value.Exists() {
		data.Response = make([]DeviceFamiliesResponse, 0)
		value.ForEach(func(k, v gjson.Result) bool {
			item := DeviceFamiliesResponse{}
			if cValue := v.Get("deviceFamily"); cValue.Exists() {
				item.DeviceFamily = types.StringValue(cValue.String())
			} else {
				item.DeviceFamily = types.StringNull()
			}
			if cValue := v.Get("deviceFamilyIdentifier"); cValue.Exists() {
				item.DeviceFamilyIdentifier = types.StringValue(cValue.String())
			} else {
				item.DeviceFamilyIdentifier = types.StringNull()
			}
			data.Response = append(data.Response, item)
			return true
		})
	}
}

//template:end fromBody

//template:begin updateFromBody
func (data *DeviceFamilies) updateFromBody(ctx context.Context, res gjson.Result) {
	for i := range data.Response {
		keys := [...]string{"deviceFamily", "deviceFamilyIdentifier"}
		keyValues := [...]string{data.Response[i].DeviceFamily.ValueString(), data.Response[i].DeviceFamilyIdentifier.ValueString()}

		var r gjson.Result
		res.Get("response").ForEach(
			func(_, v gjson.Result) bool {
				found := false
				for ik := range keys {
					if v.Get(keys[ik]).String() == keyValues[ik] {
						found = true
						continue
					}
					found = false
					break
				}
				if found {
					r = v
					return false
				}
				return true
			},
		)
		if value := r.Get("deviceFamily"); value.Exists() && !data.Response[i].DeviceFamily.IsNull() {
			data.Response[i].DeviceFamily = types.StringValue(value.String())
		} else {
			data.Response[i].DeviceFamily = types.StringNull()
		}
		if value := r.Get("deviceFamilyIdentifier"); value.Exists() && !data.Response[i].DeviceFamilyIdentifier.IsNull() {
			data.Response[i].DeviceFamilyIdentifier = types.StringValue(value.String())
		} else {
			data.Response[i].DeviceFamilyIdentifier = types.StringNull()
		}
	}
}

//template:end updateFromBody
